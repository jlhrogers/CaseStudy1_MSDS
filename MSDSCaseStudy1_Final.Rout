
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #download the files to csv
> 
> library(downloader)
> download("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="GDP.csv")
trying URL 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
Content type 'text/csv' length 9630 bytes
==================================================
downloaded 9630 bytes

> download("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="EducData.csv")
trying URL 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
Content type 'text/csv' length 59792 bytes (58 KB)
==================================================
downloaded 58 KB

> 
> 
> #read csv files
> gdpraw <- read.csv("GDP.csv")
> eduraw <- read.csv("EducData.csv")
> 
> 
> #select columns 1, 2, 4 and 5 from gdpraw and assign column names
> edudata <- eduraw
> gdpdata = gdpraw[,c(1,2,4,5)]
> names(gdpdata) <- c("countrycode", "ranking", "countryname", "gdp")
> 
> #Cleanup for gdp and edu data to omit null or empty country codes
> gdpclean <- gdpdata[!is.null(gdpdata$countrycode),]
> educlean <- edudata[!is.null(edudata$CountryCode),]
> gdpclean <- gdpclean[-which(gdpclean$countrycode==""),]
> gdpclean <- gdpclean[-which(gdpclean$ranking==""),]
> 
> #assign ranking with string to int
> gdpclean$ranking <- strtoi(gdpclean$ranking)
> 
> 
> #merge data toghether by country code
> MergedData <- merge(gdpclean, educlean, by=1)
> 
> 
> ##Case Study Questions and Answers
> 
> #1 Find he number of matching country codes
> #  Number of records that match
> length(MergedData$countrycode)
[1] 189
> ## Answer: 189
> 
> #2  Sort the data frame and find the 13th country
> # 	Cast GDP as number and remove commas, then order by GDP to find the thirteenth position 
> MergedData$GDPNUM <- as.numeric(gsub(",","", MergedData$gdp))
> sortOrder <- MergedData[order(MergedData$GDPNUM),]
> sortOrder[13, "Short.Name"]
[1] St. Kitts and Nevis
234 Levels: Afghanistan Albania Algeria American Samoa Andorra ... Zimbabwe
> ## Answer: St. Kitts and Nevis
> 
> 
> #3 Find the average GDP rankings of the High Income OECD and High Income Non OECD groups
> #	 Assigne the groups and get the means
> highIncome <- MergedData[MergedData$Income.Group == 'High income: OECD',]
> nonHighIncome <- MergedData[MergedData$Income.Group == 'High income: nonOECD',]
> 
> mean(highIncome$ranking)
[1] 32.96667
> #Answer for High Income OECD: 32.96667
> 
> mean(nonHighIncome$ranking)
[1] 91.91304
> #Answer for High Income Non OECD: 91.91304
> 
> #4 Plot the GDP for all the countries
> #Plot 1: GDP by country code and color filled by Income Group
> library(ggplot2) 
> 
> MergedData$gdp2 <- as.numeric(gsub(",", "", MergedData$gdp))
> GdpPlot <- ggplot(MergedData, aes(x=countrycode, 
+ 																					 y=gdp2, colour=Income.Group)) 
> print(GdpPlot + geom_point() + scale_y_continuous(trans='log2') 
+ 			+ theme(axis.text.x = element_text(angle = 90, hjust = 1)))
> 
> 
> #Plot 2: GDP by Income Group
> ggplot(MergedData, aes(y = gdp2, x=Income.Group,fill=Income.Group)) + scale_y_log10()+ geom_point(pch = 21, size = 8, stat = "identity", 
+ position=position_jitter())+ scale_fill_manual(values = c("red", "orange", "green", "blue","brown"), 
+ na.value = "grey50" ) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
> 
> 
> #5 Cut the GDP rankings into 5 seperate quantile groups
> #Determine the quantiles 
> country_merged_data_quantiles <- quantile(MergedData$ranking, probs = seq(0, 1, 0.2)) 
> #Assign the ranks into quantile groups 
> MergedData$ranking_quantiles <- cut(MergedData$ranking, breaks = country_merged_data_quantiles) 
> #print the table of income group vs ranking quantiles 
> print(table(MergedData$Income.Group,MergedData$ranking_quantiles))
                      
                       (1,38.6] (38.6,76.2] (76.2,114] (114,152] (152,190]
                              0           0          0         0         0
  High income: nonOECD        4           5          8         4         2
  High income: OECD          17          10          1         1         0
  Lower middle income         5          13         11         9        16
  Low income                  0           1          9        16        11
  Upper middle income        11           9          8         8         9
> 
> 
> proc.time()
   user  system elapsed 
  1.832   0.264   3.747 
